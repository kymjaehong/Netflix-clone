"""
Django settings for Django project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
'''
pathlib은 코드가 실행되는 플랫폼의 구상 경로를 인스턴스화합니다.

Path(__file__)은 현재 파일의 구상 경로의 인스턴스화입니다.
.resolve() 메서드를 통해 절대 경로를 반환합니다.
.parent는 부모 파일 경로로 이동합니다.

BASE_DIR은 settings.py이 실행된 경로에서 부모 파일 경로로 2번 이동한 경로입니다.
'''
BASE_DIR= Path(__file__).resolve().parent.parent
# print(Path(__file__), '\n')
# print(Path(__file__).resolve(), '\n')
# print(Path(__file__).resolve().parent, '\n')
# print(Path(__file__).resolve().parent.parent)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
'''
비밀키는 노출되면 안됩니다.
환경 변수로 등록하거나, 비밀 파일로 저장해 사용합니다.
'''
SECRET_KEY = 'x'


# SECURITY WARNING: don't run with debug turned on in production!
'''
디버그 모드는 프로그램을 개발할 때, 사용되는 모드입니다.
True: 특정 행동을 수행할 때마다 로그(Log)를 표시합니다.
      로그를 표시하게 되면 모든 데이터가 노출될 수 있습니다.

개발이 완료되고 운영 서버 등에 배포할 때는 반드시 디버그 모드를 False로 사용해야 합니다.
'''
DEBUG = True


'''
허용 가능한 호스트는 운영 서버 등에 배포하여 서비스할 때, 호스트로 사용 가능한 호스트 또는 도메인 목록입니다.
서비스할 웹 사이트 도메인이 등록돼 있지 않았다면, 400을 반환합니다.

해당 기능은 Cross-site request forgery, Csrf와 Http Host header attack(Cache poisoning)을 방지하기 위한 조치입니다.
디버그 모드가 False일 때, 작동합니다.
기본적으로 localhost, 127.0.0.1, 서비스하는 도메인을 등록해서 사용합니다.

ALLOWED_HOSTS에 localhost를 등록하지 않으면 오류 반환 및 manage.py runserver가 작동하지 않습니다.
모든 호스트를 허용한다면, ['*']로 설정합니다.
'''
ALLOWED_HOSTS = []


# Application definition
'''
장고에 설치된 어플리케이션 목록입니다.
등록하지 않은 어플리케이션은 서비스에서 사용할 수 없습니다.

django.contrib.admin: 관리자 인터페이스입니다. (Django의 가장 큰 장점 중 하나)
django.contrib.auth: Django 인증 시스템입니다.
django.contrib.contenttypes: 높은 수준의 모델 작업에 인터페이스를 제공하며, 프로젝트에 설치된 모든 모델을 추적할 수 있습니다.
django.contrib.sessions: 익명 세션에 데이터를 저장하기 위한 프레임워크입니다.
django.contrib.messages: 웹 페이지에 1회성 알림 메시지를 띄울 때, 사용하는 프레임워크입니다.
django.contrib.staticfiles: 배포 환경에서 쉽게 제공될 수 있게 각각의 어플리케이션의 정적 파일들을 한 곳에 모아주는 프레임워크입니다.

rest_framework: Django Rest Framework
corsheaders: Django CORS
앞으로 추가할 어플리케이션: startapp 명령어를 통해 생성된 Python 모듈 파일을 의미합니다.
'''
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'v1',

    # 타사 앱(third party apss)
    'django.contrib.sites',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
]


'''
CORS를 설정했다면, 아래의 내용을 추가할 수 있습니다.

CORS_ORIGIN_ALLOW_ALL: 모든 사이트들의 HTTP 요청을 가능하게 합니다. 
                       개발 중에는 디버그 모드처럼 True, 서비스 중인 서버에서는 False를 사용합니다.
CORS_ALLOW_CREDENTIALS: 사이트 간 HTTP 요청에 쿠기 포함 허용 여부를 설정합니다.
CORS_ALLOW_HEADERS: Access-Control-Allow-Header를 포함하는 예비 요청(preflight request) 응답에 사용되는 헤더를 설정합니다.
                    허용되지 않는 헤더는 CORS 오류를 발생시키며, 자주 사용되는 content-type이나 authorization 등의 포함 여부를 확인합니다.
CORS_ALLOW_METHODS: 사용가능한 HTTP 메서드를 설정합니다.
CORS_ORIGIN_WHITELIST: 사이트 간 요청을 허용하는 호스트 목록입니다.
'''
# CORS_ORIGIN_ALLOW_ALL= False
# CORS_ALLOW_CREDENTIALS= False
 
# CORS_ALLOW_HEADERS= [
#     'accept',
#     'accept-encoding',
#     'authorization',
#     'content-type',
#     'dnt',
#     'origin',
#     'user-agent',
#     'x-csrftoken',
#     'x-requested-with',
# ]
 
# CORS_ALLOW_METHODS= (
#     'DELETE',
#     'GET',
#     'OPTIONS',
#     'PATCH',
#     'POST',
#     'PUT',
#     '허용할 메서드',
# )
     
# CORS_ORIGIN_WHITELIST= (
#     '허용할 URL',
# )


'''
미들웨어란, OS와 어플리케이션의 중간에서 조정과 중개의 역할을 수행하는 소프트웨어입니다.
데이터, 어플리케이션 서비스, 인증, API를 관리합니다.

corsheaders.middleware.CorsMiddleware: 장고에서 CORS를 허용하려면 최상단에 CORS 미들웨어를 등록해야 합니다.
SecurityMiddleware: request/response 싸이클에 향상된 보안 기능(각각 독립적으로 enable, disable 가능)을 제공합니다.
SessionMiddleware: 세션을 지원합니다.
CommonMiddleware: 
                  DISALLOWED_USER_AGENT: 이 사용자 에이전트에 대한 접근을 금지시킵니다.
                  APPEND_SLASH: True면, 초기 url 끝에 백슬래시(/)가 붙지 않습니다.
                  PREPEND_WWW: True면, www가 없는 url에 www이 붙어서 리디렉션됩니다.
CsrfViewMiddleware: Cross-site request forgery, Csrf, 사이트 간 위조 요청에 대해서 보호해주는 미들웨어입니다.
AuthenticationMiddleware: 요청되는 모든 Httprequest 객체에 현재 로그인이 되어 있는지에 대해 나타내는 user 객체가 담겨있습니다.
MessageMiddleware: 세션 기반 미들웨어로, 반드시 세션 미들웨어 뒤에 추가해야 합니다.
XFrameOptionsMiddleware: X-Frame-Options 헤더와 함께 Clickjacking(클릭재킹)을 보호해주는 미들웨어입니다.
'''
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


'''
루트 URL 설정에 대한 Python 경로를 나타내는 문자열입니다.
이 설정으로 장고 프로젝트의 URL 설정값을 가져와 등록합니다.
'''
ROOT_URLCONF = 'Django.urls'


'''
장고는 웹 사이트에서 활용할 수 있기 때문에 html 코드 등과 연동하여 사용할 수 있습니다.

BACKEND: 사용할 템플릿 백엔드를 설정하며, 아래와 같이 템플릿을 변경하여 사용할 수 있습니다.
         ‘BACKEND’: ‘django.template.backends.django.DjangoTemplates’
         ‘BACKEND’: ‘django.template.backends.jinja2.Jinja2’
DIRS: 템플릿 소스 파일 경로입니다.
APP_DIRS: 템플릿 소스 파일을 찾을지 말지에 대한 여부를 설정합니다.
OPTIONS: 템플릿 백엔드에 전달한 추가 매개 변수입니다.
         사용 가능한 매개 변수는 템플릿 백엔드에 따라 달라집니다.
'''
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


'''
현재 프로젝트를 서비스하기 위해 Web Service Gateway Interface, WSGI 경로를 의미합니다.
환경 변수가 설정되지 않으면, 프로젝트를 생성할 때마다 제공되는 wsgi.py의 설정 값을 사용합니다.
'''
WSGI_APPLICATION = 'Django.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
'''
기본 값으로 SQLite가 설정되어 있습니다.
특정 데이터베이스를 연동할 때, DATABASES 설정 값을 변경합니다.

ENGINE: 데이터베이스의 엔진을 의미하며, MySQL이나 PostgreSQL 등을 연동할 수 있습니다.
        연동을 위해 MySQL은 pip3 install mysqlclient를 PostgreSQL은 pip3 install psycopg2를 설치합니다.

데이터베이스 연동 시에 아래의 내용을 설정해야 합니다.
HOST: 데이터베이스의 주소입니다.
      만약 로컬에서 사용하고 있다면, localhost를 입력합니다.
      클라우드 데이터베이스를 사용한다면, 엔드포인트를 호스트에 입력해야 합니다. 
      예) daehee.076923.ap-northeast-2.rds.amazonaws.com
PORT: 데이터베이스의 포트 번호이며, 데이터베이스가 사용하고 있는 포트 번호를 작성합니다.
NAME: 연동할 데이터베이스의 이름입니다.
USER: 데이터베이스에 접속할 계정 이름입니다.
PASSWORD: 접속할 데이터베이스에 설정된 비밀번호이며, 비밀키와 별도로 관리해야 합니다.

데이터베이스의 값이 노출되면 보안 기능이 상실되므로 큰 위험을 초래할 수 있습니다.

만약 데이터베이스를 사용하지 않고 API 등의 기능만을 활용할 때에는 DATABASES 속성을 삭제해 사용할 수도 있습니다.
DATABASES가 없는 경우, 데이터베이스에 연결하지 않고 사용할 수 있습니다.
'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
'''
비밀번호 유효성 검사
사용자 비밀번호의 강도를 확인하는 데 사용되는 유효성 검증기 목록입니다.

UserAttributeSimilarityValidator: 사용자의 아이디나 이메일의 속성이 비밀번호와 유사한지 확인합니다.
MinimumLengthValidator: 비밀번호의 최소 길이를 확인합니다.
CommonPasswordValidator: 비밀번호가 흔한 문자열인지 확인합니다.
NumericPasswordValidator: 비밀번호가 숫자로만 구성되어있는지 확인합니다.
'''
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/
'''
다국어 및 지역 시간 설정

LANGUAGE_CODE: 장고 프로젝트에서 사용되는 국가를 설정합니다.
TIME_ZONE: 데이터베이스의 시간대를 설정하는 문자열입니다.
USE_I18N: 장고의 번역 시스템 활성화 여부를 설정합니다.
          I18N은 국제화, Internationalization의 약어입니다
USE_L10N: 현지화 된 데이터 형식의 사용 여부를 설정합니다.
          L10N은 지역화, Localization의 약어입니다.
USE_TZ은:장고가 시간대를 인식하는 여부를 설정 값입니다.


다국어 및 지역시간을 한국 시간대에 맞춘다면 아래와 같이 변경해 사용합니다.
ANGUAGE_CODE= 'ko-kr'
TIME_ZONE= 'Asia/Seoul'
'''
LANGUAGE_CODE= 'ko-kr'

TIME_ZONE= 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
'''
정적 파일 설정

STATIC_URL: 정적 파일을 참조할 때, 사용할 URL을 의미합니다.

CSS, JS, Media와 같은 정적 파일 경로를 설정합니다.
비어 있지 않은 값으로 설정되면, 슬래시(/)로 끝나야 합니다.
'''
STATIC_URL = 'static/'
'''
정적 파일 경로 변경
로컬 경로의 정적 파일을 사용할 때, STATIC_ROOT와 STATICFILES_DIR을 변경해 사용할 수 있습니다.
BASEDIR/'static'을 사용합니다.

STATICFILES_DIRS: 정적 파일이 위치한 경로 목록을 설정합니다.
'''
STATIC_ROOT= BASE_DIR/'static_root'
MEDIA_ROOT= BASE_DIR/'media'
MEDIA_URL= '/media/'

STATICFILES_DIRS= [BASE_DIR/'static']


# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


'''
기타 설정
이외에도 접근 가능한 IP인 ALLOW_IPS나 크론 작업(CRONJOBS) 등을 추가할 수 있습니다.
'''


# Auth setting
'''
AbstractUser를 상속받은 새 모델을 만들었다면, 이 모델을 유저 모델로 사용하기 위해서는 settings.py 파일에도 추가 설정이 필요힙니다.

'''
AUTH_USER_MODEL= 'v1.CustomUser'


'''
Django session 기반의 인증 시스템입니다.
    'django.contrib.auth.backends.ModelBackend'는 Django의 기본 인증 시스템입니다.

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    위의 기능을 INSTALLED_APPS에 추가해야 합니다.
'''
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]


'''
내가 만들 사이트의 수를 입력합니다.
INSTALLED_APPS에 'django.contrib.sites'를 추가해야 합니다.

INSTALLED_APPS에 'django.contrib.sites'를 추가하면, 어떠한 기능을 여러 웹 사이트에서 사용할 수 있게 해줍니다.
즉 비슷한 컨텐츠나 기능을 가진 웹 사이트가 여러 개 필요할 때, Django 프로젝트 하나로 여러 사이트를 운영할 수 있다는 것입니다.
'''
SITE_ID= 1


'''
Django allauth를 사용하면, 단 3줄의 코드로 이메일로 로그인 기능을 구현할 수 있습니다.
1. 로그인 시에 USER Name이 아니라 'email'을 사용하게 하는 설정
2. 화원가입 시, 'email'을 필수 항목으로 만드는 설정
3. USER Name을 필수 항목에서 제거하는 설정
4. 계정 이메일 인증 여부를 설정 - 'mandaroty', 'optional', 'none'

'''
ACCOUNT_AUTHENTICATION_METHOD= 'email'
ACCOUNT_EMAIL_REQUIRED= True
ACCOUNT_USERNAME_REQUIRED= False
ACCOUNT_EMAIL_VERIFICATION= 'none' # 클론 코딩이기 때문에

LOGIN_REDIRECT_URL= '/'